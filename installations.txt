curl
    - sudo apt install curl

docker
    - Follow steps 1-3 in https://docs.docker.com/engine/install/ubuntu/#install-using-the-repository
    - Please use sudo when using the docker command unless it is configured to work as a non-root user.  More details here: https://docs.docker.com/engine/install/linux-postinstall/#manage-docker-as-a-non-root-user
    - To see output of docker commands like 'RUN ls -l' in Dockerfile, build it like this: sudo docker build -t foo . --progress=plain --no-cache

pipenv
    - pip builds are not deterministic.  We can freeze the exact versions of all specified packages and their dependents, but then we will have to maintain them ourselves.
        - Ex: What if there was a security bug in a dependent package and that was fixed in the next version?
    - pipfile elevates this problem for us by taking care of monitoring these things and provides us with a package set that works together.
    - Here are few important commands we frequently use in pipenv:
        - pip install pipenv: To install pipenv using pip
        - pipenv shell: To open a virtual environment to not disturb your system's packages
        - pipenv install <package-name> <--dev>: Install a package (use --dev for only dev packages like pytest)
        - pipenv lock: To pin all package versions to make it exactly replicable in other systems like prod
        - pipenv install --ignore-pipfile <--dev>: To install the locked package versions created above (use --dev to install dev packages too)
        - pipenv graph: This will print the all the dependent and sub-dependent packages
        - pipenv run <cmd.py>: To run a command without creating a virtual environment
        - pipenv uninstall <package-name>: To uninstall a package

top 
    - command in ubuntu used to monitor CPU and memory usage

minikube
    - https://minikube.sigs.k8s.io/docs/start/
    - Everytime when you want to start it use: minikube start


push docker images to https://hub.docker.com
    - build the docker image: sudo docker build -t flask_helm .
        - This will build a docker image named flask_helm from current directory
    - sudo docker image ls
        - This command should now show flask_helm
    - Create a repository named test-images in hub.docker.com
    - sudo docker tag flask_helm 2kunal6/test-images:latest
        - This will tag flask_helm to 2kunal6/test-images:latest
    - sudo docker login
    - sudo docker push 2kunal6/test-images
